

1. First step: think solving using brute force/naive approach. It generally : O(n^2)
2. Second step: think solving by two pointer: it reduces cost of brute force . It generally: O(n+m)
3. Third step: if complexity needs greater than O(n). then sort the input array. then binary search. so O(n*logn)
4. Fourth step: if complexity requirement is less than equal O(n) then use hashing. 

5. 



******************&&&&&&&&&&&&&&&&&&***********************

INT_MAX is +2147483647
INT_MIN is -2147483648

finding length of integer value = log10(x)+1; or int length = to_string(input).length();



sort three numbers: a, b, c in O(1);
//first sort a, b, c
        int small, mid, high;
        small = min(a, min(b, c));
        high = max(a, max(b, c));
        mid = (a+b+c)-small-high;
        




///speedup the code

auto speedup = []() {
    cin.tie(0);
    ios::sync_with_stdio(false);
    return 0;
}();



//convert string to integer : int x = stoll(str)

//convert int to string = to_string(x);




#################

Heap:(implementation)
	binary-tree
	max-heap  (using array, using vector)
	min-heap  (using array, using vector)
	heap-sort 
	priority-queue

###Initialize a 2D vector	
vector<vector<int>> res(numRows);
vector<vector<int>> ans(n, vector<int> (n, 0));
vec = vector<vector<int>> ();


###compare the prefix of string with a substring
if(str.compare(0, test.size(), test)==0) then it proves that str has same prefix as test string.



####swap two variables without using any tmp variable
a = 2
b = 3
a = a+b
b = a - b;
a = a-b;

####and also a popular question is sort a, b, c (three variable)

   lo = min(min(a, b), c);
   hi = max(max(a, b), c);
   printf("LOWEST %d\n", lo);
   printf("MIDDLE %d\n", a+b+c-lo-hi);
   printf("HIGHEST %d\n", hi);  

###another way:
if (x > y) swap(x, y);
if (y > z) swap(y, z)
if (x > y) swap(x, y);





















